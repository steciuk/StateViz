{
	"numTotalTestSuites": 99,
	"numPassedTestSuites": 99,
	"numFailedTestSuites": 0,
	"numPendingTestSuites": 0,
	"numTotalTests": 255,
	"numPassedTests": 255,
	"numFailedTests": 0,
	"numPendingTests": 0,
	"numTodoTests": 0,
	"startTime": 1715798943189,
	"success": true,
	"testResults": [
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should connect and disconnect successfully",
					"status": "passed",
					"title": "should connect and disconnect successfully",
					"duration": 5,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should throw an error when connecting twice",
					"status": "passed",
					"title": "should throw an error when connecting twice",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should throw an error when sending a message without connection",
					"status": "passed",
					"title": "should throw an error when sending a message without connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should call port postMessage on send with correct arguments if connected",
					"status": "passed",
					"title": "should call port postMessage on send with correct arguments if connected",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should properly register and remove message listeners via onMessage on port after connection",
					"status": "passed",
					"title": "should properly register and remove message listeners via onMessage on port after connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should register pending message listeners when not connected",
					"status": "passed",
					"title": "should register pending message listeners when not connected",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should receive messages from the port when onMessage registered before connection",
					"status": "passed",
					"title": "should receive messages from the port when onMessage registered before connection",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should receive messages from the port when onMessage registered after connection",
					"status": "passed",
					"title": "should receive messages from the port when onMessage registered after connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should not receive messages from the port when disconnect",
					"status": "passed",
					"title": "should not receive messages from the port when disconnect",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should receive messages from the port when reconnect",
					"status": "passed",
					"title": "should receive messages from the port when reconnect",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeConnector"],
					"fullName": " ChromeBridgeConnector should not clear pending message listeners when connecting or disconnecting",
					"status": "passed",
					"title": "should not clear pending message listeners when connecting or disconnecting",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should connect and disconnect successfully",
					"status": "passed",
					"title": "should connect and disconnect successfully",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should throw an error when connecting twice",
					"status": "passed",
					"title": "should throw an error when connecting twice",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should throw an error when sending a message without connection",
					"status": "passed",
					"title": "should throw an error when sending a message without connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should call port postMessage on send with correct arguments if connected",
					"status": "passed",
					"title": "should call port postMessage on send with correct arguments if connected",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should properly register and remove message listeners via onMessage on port after connection",
					"status": "passed",
					"title": "should properly register and remove message listeners via onMessage on port after connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should register pending message listeners when not connected",
					"status": "passed",
					"title": "should register pending message listeners when not connected",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should receive messages from the port when onMessage registered before connection",
					"status": "passed",
					"title": "should receive messages from the port when onMessage registered before connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should receive messages from the port when onMessage registered after connection",
					"status": "passed",
					"title": "should receive messages from the port when onMessage registered after connection",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should not receive messages from the port when disconnect",
					"status": "passed",
					"title": "should not receive messages from the port when disconnect",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should receive messages from the port when reconnect",
					"status": "passed",
					"title": "should receive messages from the port when reconnect",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeToTabConnector"],
					"fullName": " ChromeBridgeToTabConnector should not clear pending message listeners when connecting or disconnecting",
					"status": "passed",
					"title": "should not clear pending message listeners when connecting or disconnecting",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should add chrome.runtime.onConnect listener",
					"status": "passed",
					"title": "should add chrome.runtime.onConnect listener",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should not connect if the port name does not match",
					"status": "passed",
					"title": "should not connect if the port name does not match",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should connect if the port name matches",
					"status": "passed",
					"title": "should connect if the port name matches",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should call onConnect callback when connected",
					"status": "passed",
					"title": "should call onConnect callback when connected",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should throw an error when sending a message without connection",
					"status": "passed",
					"title": "should throw an error when sending a message without connection",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should call port postMessage on send with correct arguments if connected",
					"status": "passed",
					"title": "should call port postMessage on send with correct arguments if connected",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should properly register and remove message listeners via onMessage on port after connection",
					"status": "passed",
					"title": "should properly register and remove message listeners via onMessage on port after connection",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should register pending message listeners when not connected",
					"status": "passed",
					"title": "should register pending message listeners when not connected",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should receive messages from the port when onMessage registered before connection",
					"status": "passed",
					"title": "should receive messages from the port when onMessage registered before connection",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should receive messages from the port when onMessage registered after connection",
					"status": "passed",
					"title": "should receive messages from the port when onMessage registered after connection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should not receive messages from the port when disconnect",
					"status": "passed",
					"title": "should not receive messages from the port when disconnect",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should receive messages from the port when reconnect",
					"status": "passed",
					"title": "should receive messages from the port when reconnect",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ChromeBridgeListener"],
					"fullName": " ChromeBridgeListener should not clear pending message listeners when connecting or disconnecting",
					"status": "passed",
					"title": "should not clear pending message listeners when connecting or disconnecting",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ChromeBridgeConnector - ChromeBridgeListener"
					],
					"fullName": " ChromeBridgeConnector - ChromeBridgeListener should not connect to one another if the port name does not match",
					"status": "passed",
					"title": "should not connect to one another if the port name does not match",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ChromeBridgeConnector - ChromeBridgeListener"
					],
					"fullName": " ChromeBridgeConnector - ChromeBridgeListener should connect to one another if the port name matches",
					"status": "passed",
					"title": "should connect to one another if the port name matches",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ChromeBridgeConnector - ChromeBridgeListener"
					],
					"fullName": " ChromeBridgeConnector - ChromeBridgeListener should call onConnect callback when connected and reconnected",
					"status": "passed",
					"title": "should call onConnect callback when connected and reconnected",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ChromeBridgeConnector - ChromeBridgeListener"
					],
					"fullName": " ChromeBridgeConnector - ChromeBridgeListener should allow sending bidirectional messages",
					"status": "passed",
					"title": "should allow sending bidirectional messages",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798944161,
			"endTime": 1715798944189,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/shared/chrome/ChromeBridge.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "onChromeMessage"],
					"fullName": " onChromeMessage should add and remove a listener",
					"status": "passed",
					"title": "should add and remove a listener",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "onChromeMessage"],
					"fullName": " onChromeMessage should call the callback function with the correct arguments",
					"status": "passed",
					"title": "should call the callback function with the correct arguments",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "onChromeMessage"],
					"fullName": " onChromeMessage should not call the callback function after the listener is removed",
					"status": "passed",
					"title": "should not call the callback function after the listener is removed",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "sendChromeMessage"],
					"fullName": " sendChromeMessage should send a message with correct content",
					"status": "passed",
					"title": "should send a message with correct content",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "sendChromeMessageToTab"],
					"fullName": " sendChromeMessageToTab should send a message with correct content",
					"status": "passed",
					"title": "should send a message with correct content",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "sendChromeMessage - onChromeMessage"],
					"fullName": " sendChromeMessage - onChromeMessage should send and receive a message with correct content",
					"status": "passed",
					"title": "should send and receive a message with correct content",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "sendChromeMessageToTab - onChromeMessage"],
					"fullName": " sendChromeMessageToTab - onChromeMessage should send and receive a message with correct content",
					"status": "passed",
					"title": "should send and receive a message with correct content",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798949912,
			"endTime": 1715798949920,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/shared/chrome/chrome-message.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "joinArray"],
					"fullName": " joinArray should return an empty string for an empty array",
					"status": "passed",
					"title": "should return an empty string for an empty array",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "joinArray"],
					"fullName": " joinArray should return the single element for an array with one element",
					"status": "passed",
					"title": "should return the single element for an array with one element",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "joinArray"],
					"fullName": " joinArray should join the elements with commas and \"and\" for an array with multiple elements",
					"status": "passed",
					"title": "should join the elements with commas and \"and\" for an array with multiple elements",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798956357,
			"endTime": 1715798956359,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/shared/utils/joinArray.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "ContentIsolated", "initialize"],
					"fullName": " ContentIsolated initialize should call ChromeBridgeListener constructor",
					"status": "passed",
					"title": "should call ChromeBridgeListener constructor",
					"duration": 5,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ContentIsolated", "initialize"],
					"fullName": " ContentIsolated initialize should throw an error if ContentIsolated is already initialized",
					"status": "passed",
					"title": "should throw an error if ContentIsolated is already initialized",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleDevtoolsPanelConnection"
					],
					"fullName": " ContentIsolated handleDevtoolsPanelConnection should send FULL_SKELETON message",
					"status": "passed",
					"title": "should send FULL_SKELETON message",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ContentIsolated", "setupListeners"],
					"fullName": " ContentIsolated setupListeners should setup postMessageBridge listener",
					"status": "passed",
					"title": "should setup postMessageBridge listener",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ContentIsolated", "setupListeners"],
					"fullName": " ContentIsolated setupListeners should setup chromeBridge listener",
					"status": "passed",
					"title": "should setup chromeBridge listener",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ContentIsolated", "setupListeners"],
					"fullName": " ContentIsolated setupListeners should setup onChromeMessage listener",
					"status": "passed",
					"title": "should setup onChromeMessage listener",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleLibraryAttachedPostMessage"
					],
					"fullName": " ContentIsolated handleLibraryAttachedPostMessage should register the library",
					"status": "passed",
					"title": "should register the library",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleLibraryAttachedPostMessage"
					],
					"fullName": " ContentIsolated handleLibraryAttachedPostMessage should send LIBRARY_ATTACHED message",
					"status": "passed",
					"title": "should send LIBRARY_ATTACHED message",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ContentIsolated", "addNodesRecursively"],
					"fullName": " ContentIsolated addNodesRecursively should add nodes to currentNodes",
					"status": "passed",
					"title": "should add nodes to currentNodes",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountRootsPostMessage"
					],
					"fullName": " ContentIsolated handleMountRootsPostMessage should add roots to currentNodes and send FULL_SKELETON message",
					"status": "passed",
					"title": "should add roots to currentNodes and send FULL_SKELETON message",
					"duration": 3,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountRootsPostMessage"
					],
					"fullName": " ContentIsolated handleMountRootsPostMessage should not add roots if they are already mounted",
					"status": "passed",
					"title": "should not add roots if they are already mounted",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleMountNodesPostMessage should not add nodes to currentNodes if parent was not found",
					"status": "passed",
					"title": "should not add nodes to currentNodes if parent was not found",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleMountNodesPostMessage should properly add nodes at the end of children array",
					"status": "passed",
					"title": "should properly add nodes at the end of children array",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleMountNodesPostMessage should properly add nodes at the beginning of children array",
					"status": "passed",
					"title": "should properly add nodes at the beginning of children array",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleMountNodesPostMessage should properly add nodes after the anchor node",
					"status": "passed",
					"title": "should properly add nodes after the anchor node",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleMountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleMountNodesPostMessage should properly add nodes before the anchor node",
					"status": "passed",
					"title": "should properly add nodes before the anchor node",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleNodeUpdatePostMessage"
					],
					"fullName": " ContentIsolated handleNodeUpdatePostMessage should update node and send FULL_SKELETON message",
					"status": "passed",
					"title": "should update node and send FULL_SKELETON message",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ContentIsolated", "removeNodesRecursively"],
					"fullName": " ContentIsolated removeNodesRecursively should remove node and its children from currentNodes",
					"status": "passed",
					"title": "should remove node and its children from currentNodes",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleUnmountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleUnmountNodesPostMessage should remove root node from currentNodes",
					"status": "passed",
					"title": "should remove root node from currentNodes",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleUnmountNodesPostMessage"
					],
					"fullName": " ContentIsolated handleUnmountNodesPostMessage should remove child node from parent node",
					"status": "passed",
					"title": "should remove child node from parent node",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleInspectedDataPostMessage"
					],
					"fullName": " ContentIsolated handleInspectedDataPostMessage should send INSPECTED_DATA ChromeBridge message",
					"status": "passed",
					"title": "should send INSPECTED_DATA ChromeBridge message",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleInspectElementBridgeMessage"
					],
					"fullName": " ContentIsolated handleInspectElementBridgeMessage should send INSPECT_ELEMENT PostMessageBridge message",
					"status": "passed",
					"title": "should send INSPECT_ELEMENT PostMessageBridge message",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleHoverElementBridgeMessage"
					],
					"fullName": " ContentIsolated handleHoverElementBridgeMessage should send HOVER_ELEMENT PostMessageBridge message",
					"status": "passed",
					"title": "should send HOVER_ELEMENT PostMessageBridge message",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"ContentIsolated",
						"handleIsLibraryAttachedChromeMessage"
					],
					"fullName": " ContentIsolated handleIsLibraryAttachedChromeMessage should respond with librariesAttached",
					"status": "passed",
					"title": "should respond with librariesAttached",
					"duration": 1,
					"failureMessages": []
				}
			],
			"startTime": 1715798945872,
			"endTime": 1715798945893,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-isolated/ContentIsolated.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should add library to registered libraries",
					"status": "passed",
					"title": "should add library to registered libraries",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should throw error if library already registered",
					"status": "passed",
					"title": "should throw error if library already registered",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should add other library to registered libraries",
					"status": "passed",
					"title": "should add other library to registered libraries",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should set adapter prefix",
					"status": "passed",
					"title": "should set adapter prefix",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should set adapter prefix with count",
					"status": "passed",
					"title": "should set adapter prefix with count",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should call postMessageBridge.onMessage",
					"status": "passed",
					"title": "should call postMessageBridge.onMessage",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "initialize"],
					"fullName": " Adapter initialize should call inject",
					"status": "passed",
					"title": "should call inject",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "sendLibraryAttached"],
					"fullName": " Adapter sendLibraryAttached should call postMessageBridge.send with correct library",
					"status": "passed",
					"title": "should call postMessageBridge.send with correct library",
					"duration": 3,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "sendMountRoots"],
					"fullName": " Adapter sendMountRoots should call postMessageBridge.send with passed roots",
					"status": "passed",
					"title": "should call postMessageBridge.send with passed roots",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "sendMountNodes"],
					"fullName": " Adapter sendMountNodes should call postMessageBridge.send with passed operations",
					"status": "passed",
					"title": "should call postMessageBridge.send with passed operations",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "sendUpdateNodes"],
					"fullName": " Adapter sendUpdateNodes should call postMessageBridge.send with passed operations",
					"status": "passed",
					"title": "should call postMessageBridge.send with passed operations",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "sendUnmountNodes"],
					"fullName": " Adapter sendUnmountNodes should call postMessageBridge.send with passed operations",
					"status": "passed",
					"title": "should call postMessageBridge.send with passed operations",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "sendInspectedData"],
					"fullName": " Adapter sendInspectedData should call postMessageBridge.send with passed content",
					"status": "passed",
					"title": "should call postMessageBridge.send with passed content",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "generateNewElementId"],
					"fullName": " Adapter generateNewElementId should return adapter prefix with 0 for the first node",
					"status": "passed",
					"title": "should return adapter prefix with 0 for the first node",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "generateNewElementId"],
					"fullName": " Adapter generateNewElementId should return correct ids for subsequent nodes",
					"status": "passed",
					"title": "should return correct ids for subsequent nodes",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "getElementId"],
					"fullName": " Adapter getElementId should return new id for not seen elements",
					"status": "passed",
					"title": "should return new id for not seen elements",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "getElementId"],
					"fullName": " Adapter getElementId should return existing id for seen elements",
					"status": "passed",
					"title": "should return existing id for seen elements",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "handleInspectElementPostMessage"],
					"fullName": " Adapter handleInspectElementPostMessage should call inspectElements with existing ids",
					"status": "passed",
					"title": "should call inspectElements with existing ids",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "handleInspectElementPostMessage"],
					"fullName": " Adapter handleInspectElementPostMessage should filter out not existing ids for inspectElements call",
					"status": "passed",
					"title": "should filter out not existing ids for inspectElements call",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "handleHoverPostMessage"],
					"fullName": " Adapter handleHoverPostMessage should do nothing if node not found",
					"status": "passed",
					"title": "should do nothing if node not found",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "handleHoverPostMessage"],
					"fullName": " Adapter handleHoverPostMessage should do nothing if element not found",
					"status": "passed",
					"title": "should do nothing if element not found",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "handleHoverPostMessage"],
					"fullName": " Adapter handleHoverPostMessage should call setOverlay initially and on every resize",
					"status": "passed",
					"title": "should call setOverlay initially and on every resize",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "Adapter", "setOverlay"],
					"fullName": " Adapter setOverlay should set overlay element",
					"status": "passed",
					"title": "should set overlay element",
					"duration": 35,
					"failureMessages": []
				}
			],
			"startTime": 1715798947499,
			"endTime": 1715798947555,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/Adapter.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.NULL if data is null",
					"status": "passed",
					"title": "should return DataType.NULL if data is null",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.UNDEFINED if data is undefined",
					"status": "passed",
					"title": "should return DataType.UNDEFINED if data is undefined",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.HTML_ELEMENT if data is an HTMLElement",
					"status": "passed",
					"title": "should return DataType.HTML_ELEMENT if data is an HTMLElement",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.HTML_ALL_COLLECTION if data is an HTMLCollection",
					"status": "passed",
					"title": "should return DataType.HTML_ALL_COLLECTION if data is an HTMLCollection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.BOOLEAN if data is a boolean",
					"status": "passed",
					"title": "should return DataType.BOOLEAN if data is a boolean",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.FUNCTION if data is a function",
					"status": "passed",
					"title": "should return DataType.FUNCTION if data is a function",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.STRING if data is a string",
					"status": "passed",
					"title": "should return DataType.STRING if data is a string",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.SYMBOL if data is a symbol",
					"status": "passed",
					"title": "should return DataType.SYMBOL if data is a symbol",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.BIGINT if data is a bigint",
					"status": "passed",
					"title": "should return DataType.BIGINT if data is a bigint",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.NUMBER if data is a number",
					"status": "passed",
					"title": "should return DataType.NUMBER if data is a number",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.INFINITY if data is Infinity",
					"status": "passed",
					"title": "should return DataType.INFINITY if data is Infinity",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.NAN if data is NaN",
					"status": "passed",
					"title": "should return DataType.NAN if data is NaN",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.REACT_ELEMENT if data is a React element",
					"status": "passed",
					"title": "should return DataType.REACT_ELEMENT if data is a React element",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.ARRAY if data is an array",
					"status": "passed",
					"title": "should return DataType.ARRAY if data is an array",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.REGEXP if data is a RegExp",
					"status": "passed",
					"title": "should return DataType.REGEXP if data is a RegExp",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.DATE if data is a Date",
					"status": "passed",
					"title": "should return DataType.DATE if data is a Date",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.OBJECT if data is a plain object",
					"status": "passed",
					"title": "should return DataType.OBJECT if data is a plain object",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "typeData"],
					"fullName": " typeData should return DataType.CLASS_INSTANCE if data is a class instance",
					"status": "passed",
					"title": "should return DataType.CLASS_INSTANCE if data is a class instance",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return MAX_DEPTH if depth exceeds the maximum depth",
					"status": "passed",
					"title": "should return MAX_DEPTH if depth exceeds the maximum depth",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.NULL if value is null",
					"status": "passed",
					"title": "should return DataType.NULL if value is null",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.UNDEFINED if value is undefined",
					"status": "passed",
					"title": "should return DataType.UNDEFINED if value is undefined",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.NAN if value is NaN",
					"status": "passed",
					"title": "should return DataType.NAN if value is NaN",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.INFINITY if value is Infinity",
					"status": "passed",
					"title": "should return DataType.INFINITY if value is Infinity",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.NUMBER if value is a number",
					"status": "passed",
					"title": "should return DataType.NUMBER if value is a number",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.BOOLEAN if value is a boolean",
					"status": "passed",
					"title": "should return DataType.BOOLEAN if value is a boolean",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.STRING if value is a string",
					"status": "passed",
					"title": "should return DataType.STRING if value is a string",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.SYMBOL if value is a symbol",
					"status": "passed",
					"title": "should return DataType.SYMBOL if value is a symbol",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.BIGINT if value is a bigint",
					"status": "passed",
					"title": "should return DataType.BIGINT if value is a bigint",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.REGEXP if value is a RegExp",
					"status": "passed",
					"title": "should return DataType.REGEXP if value is a RegExp",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.DATE if value is a Date",
					"status": "passed",
					"title": "should return DataType.DATE if value is a Date",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.HTML_ELEMENT if value is an HTMLElement",
					"status": "passed",
					"title": "should return DataType.HTML_ELEMENT if value is an HTMLElement",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.HTML_ALL_COLLECTION if value is an HTMLCollection",
					"status": "passed",
					"title": "should return DataType.HTML_ALL_COLLECTION if value is an HTMLCollection",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.REACT_ELEMENT if value is a React element",
					"status": "passed",
					"title": "should return DataType.REACT_ELEMENT if value is a React element",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.ARRAY if value is an array",
					"status": "passed",
					"title": "should return DataType.ARRAY if value is an array",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.OBJECT if value is a plain object",
					"status": "passed",
					"title": "should return DataType.OBJECT if value is a plain object",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.CLASS_INSTANCE if value is a class instance",
					"status": "passed",
					"title": "should return DataType.CLASS_INSTANCE if value is a class instance",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return DataType.FUNCTION if value is a function",
					"status": "passed",
					"title": "should return DataType.FUNCTION if value is a function",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "dehydrate"],
					"fullName": " dehydrate should return properly dehydrated nested objects",
					"status": "passed",
					"title": "should return properly dehydrated nested objects",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798946625,
			"endTime": 1715798946637,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/dehydrate.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should send a message with the correct content",
					"status": "passed",
					"title": "should send a message with the correct content",
					"duration": 5,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should not call the callback when receiving message without the source",
					"status": "passed",
					"title": "should not call the callback when receiving message without the source",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should not call the callback when receiving message with the same source",
					"status": "passed",
					"title": "should not call the callback when receiving message with the same source",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should call the callback when receiving a message from different source",
					"status": "passed",
					"title": "should call the callback when receiving a message from different source",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should not call the callback when receiving a message from different origin",
					"status": "passed",
					"title": "should not call the callback when receiving a message from different origin",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should not call the callback when the listener is removed",
					"status": "passed",
					"title": "should not call the callback when the listener is removed",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should call the callback only once when registered with once",
					"status": "passed",
					"title": "should call the callback only once when registered with once",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should not unregister the listener when callback was not called, when registered with once",
					"status": "passed",
					"title": "should not unregister the listener when callback was not called, when registered with once",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "PostMessageBridge"],
					"fullName": " PostMessageBridge should throw an error when trying to get instance with different source in the same context",
					"status": "passed",
					"title": "should throw an error when trying to get instance with different source in the same context",
					"duration": 1,
					"failureMessages": []
				}
			],
			"startTime": 1715798950661,
			"endTime": 1715798950671,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/shared/PostMessageBridge.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "appTest"],
					"fullName": " appTest render text",
					"status": "passed",
					"title": "render text",
					"duration": 25,
					"failureMessages": []
				}
			],
			"startTime": 1715798957240,
			"endTime": 1715798957265,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/components/Demo/app.test.tsx"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "ReactAdapter", "inject"],
					"fullName": " ReactAdapter inject should throw an error if React DevTools is already hooked",
					"status": "passed",
					"title": "should throw an error if React DevTools is already hooked",
					"duration": 3,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "inject"],
					"fullName": " ReactAdapter inject should throw an error if React DevTools is already hooked",
					"status": "passed",
					"title": "should throw an error if React DevTools is already hooked",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "inject"],
					"fullName": " ReactAdapter inject should set the StateViz hook",
					"status": "passed",
					"title": "should set the StateViz hook",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "handleCommitFiberRoot"],
					"fullName": " ReactAdapter handleCommitFiberRoot should mount a new root if there is no alternate",
					"status": "passed",
					"title": "should mount a new root if there is no alternate",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "handleCommitFiberRoot"],
					"fullName": " ReactAdapter handleCommitFiberRoot should update an existing root if there is an alternate",
					"status": "passed",
					"title": "should update an existing root if there is an alternate",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "handleCommitFiberRoot"],
					"fullName": " ReactAdapter handleCommitFiberRoot should unmount an existing root if it is not mounted anymore",
					"status": "passed",
					"title": "should unmount an existing root if it is not mounted anymore",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "mountNewRoot"],
					"fullName": " ReactAdapter mountNewRoot should mount a new root and send the mount roots message",
					"status": "passed",
					"title": "should mount a new root and send the mount roots message",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "updateRoot"],
					"fullName": " ReactAdapter updateRoot should send the mount nodes message with the updated nodes",
					"status": "passed",
					"title": "should send the mount nodes message with the updated nodes",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "unmountFiber"],
					"fullName": " ReactAdapter unmountFiber should send the unmount nodes message and remove the fiber from existing nodes and inspected data",
					"status": "passed",
					"title": "should send the unmount nodes message and remove the fiber from existing nodes and inspected data",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "getElementId"],
					"fullName": " ReactAdapter getElementId should generate a new element ID if the fiber is not in the elementToId map",
					"status": "passed",
					"title": "should generate a new element ID if the fiber is not in the elementToId map",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "getElementId"],
					"fullName": " ReactAdapter getElementId should return the existing element ID if the fiber is in the elementToId map",
					"status": "passed",
					"title": "should return the existing element ID if the fiber is in the elementToId map",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "ReactAdapter", "getElementId"],
					"fullName": " ReactAdapter getElementId should return the existing element ID of the alternate fiber if it exists",
					"status": "passed",
					"title": "should return the existing element ID of the alternate fiber if it exists",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798948467,
			"endTime": 1715798948478,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/react/ReactAdapter.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "SvelteAdapter", "injectListeners"],
					"fullName": " SvelteAdapter injectListeners should add event listeners",
					"status": "passed",
					"title": "should add event listeners",
					"duration": 5,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "injectListeners"],
					"fullName": " SvelteAdapter injectListeners should return a function that removes all event listeners",
					"status": "passed",
					"title": "should return a function that removes all event listeners",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "inject"],
					"fullName": " SvelteAdapter inject should inject listeners",
					"status": "passed",
					"title": "should inject listeners",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "inject"],
					"fullName": " SvelteAdapter inject should not sendLibraryAttached if no svelte detected",
					"status": "passed",
					"title": "should not sendLibraryAttached if no svelte detected",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "inject"],
					"fullName": " SvelteAdapter inject should not sendLibraryAttached if Svelte version is less than 4",
					"status": "passed",
					"title": "should not sendLibraryAttached if Svelte version is less than 4",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "inspectElements"],
					"fullName": " SvelteAdapter inspectElements should save ids to the set",
					"status": "passed",
					"title": "should save ids to the set",
					"duration": 3,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "inspectElements"],
					"fullName": " SvelteAdapter inspectElements should call handleNodeInspect for each id",
					"status": "passed",
					"title": "should call handleNodeInspect for each id",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"SvelteAdapter",
						"handleSvelteRegisterComponent"
					],
					"fullName": " SvelteAdapter handleSvelteRegisterComponent should add captureState and propsKeys to componentsCaptureStates",
					"status": "passed",
					"title": "should add captureState and propsKeys to componentsCaptureStates",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"SvelteAdapter",
						"handleSvelteRegisterComponent"
					],
					"fullName": " SvelteAdapter handleSvelteRegisterComponent should call update if component is already mounted",
					"status": "passed",
					"title": "should call update if component is already mounted",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": [
						"",
						"SvelteAdapter",
						"handleSvelteRegisterComponent"
					],
					"fullName": " SvelteAdapter handleSvelteRegisterComponent should add component to pendingComponents if it is not mounted",
					"status": "passed",
					"title": "should add component to pendingComponents if it is not mounted",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleNodeInspect"],
					"fullName": " SvelteAdapter handleNodeInspect should not call sendInspectedData if node is not in inspectedElementsIds",
					"status": "passed",
					"title": "should not call sendInspectedData if node is not in inspectedElementsIds",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleNodeInspect"],
					"fullName": " SvelteAdapter handleNodeInspect should call sendInspectedData with correct data",
					"status": "passed",
					"title": "should call sendInspectedData with correct data",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleSvelteRegisterBlock"],
					"fullName": " SvelteAdapter handleSvelteRegisterBlock should call hijacks",
					"status": "passed",
					"title": "should call hijacks",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should call original",
					"status": "passed",
					"title": "should call original",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should call mount",
					"status": "passed",
					"title": "should call mount",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should call mount for first each",
					"status": "passed",
					"title": "should call mount for first each",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should not call mount for subsequent each",
					"status": "passed",
					"title": "should not call mount for subsequent each",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should get component name from pendingComponents if it is not mounted",
					"status": "passed",
					"title": "should get component name from pendingComponents if it is not mounted",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should set pendingComponents name to Unknown if it is not mounted",
					"status": "passed",
					"title": "should set pendingComponents name to Unknown if it is not mounted",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockMount"],
					"fullName": " SvelteAdapter hijackBlockMount should set currentBlockId to blockId and revert it after mounting",
					"status": "passed",
					"title": "should set currentBlockId to blockId and revert it after mounting",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockPatch"],
					"fullName": " SvelteAdapter hijackBlockPatch should call original",
					"status": "passed",
					"title": "should call original",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockPatch"],
					"fullName": " SvelteAdapter hijackBlockPatch should call handleNodeInspect for component",
					"status": "passed",
					"title": "should call handleNodeInspect for component",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockPatch"],
					"fullName": " SvelteAdapter hijackBlockPatch should set currentBlockId to blockId and revert it after patching",
					"status": "passed",
					"title": "should set currentBlockId to blockId and revert it after patching",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockDestroy"],
					"fullName": " SvelteAdapter hijackBlockDestroy should call original",
					"status": "passed",
					"title": "should call original",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockDestroy"],
					"fullName": " SvelteAdapter hijackBlockDestroy should call unmount for each if count is 0",
					"status": "passed",
					"title": "should call unmount for each if count is 0",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockDestroy"],
					"fullName": " SvelteAdapter hijackBlockDestroy should not call unmount for each if count is not 0",
					"status": "passed",
					"title": "should not call unmount for each if count is not 0",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "hijackBlockDestroy"],
					"fullName": " SvelteAdapter hijackBlockDestroy should call unmount for component",
					"status": "passed",
					"title": "should call unmount for component",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleSvelteDOMInsert"],
					"fullName": " SvelteAdapter handleSvelteDOMInsert should call mount",
					"status": "passed",
					"title": "should call mount",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleSvelteDOMInsert"],
					"fullName": " SvelteAdapter handleSvelteDOMInsert should call mount with correct children",
					"status": "passed",
					"title": "should call mount with correct children",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleSvelteDOMInsert"],
					"fullName": " SvelteAdapter handleSvelteDOMInsert should add children to existingNodes",
					"status": "passed",
					"title": "should add children to existingNodes",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleSvelteDOMRemove"],
					"fullName": " SvelteAdapter handleSvelteDOMRemove should call unmount",
					"status": "passed",
					"title": "should call unmount",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "handleSvelteDOMSetData"],
					"fullName": " SvelteAdapter handleSvelteDOMSetData should call update with new data",
					"status": "passed",
					"title": "should call update with new data",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "mount"],
					"fullName": " SvelteAdapter mount should sendMountRoots if containingBlockId is null",
					"status": "passed",
					"title": "should sendMountRoots if containingBlockId is null",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "mount"],
					"fullName": " SvelteAdapter mount should sendMountNodes with target as a parent if they are under the same block",
					"status": "passed",
					"title": "should sendMountNodes with target as a parent if they are under the same block",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "mount"],
					"fullName": " SvelteAdapter mount should sendMountNodes with containingBlockId as a parent if they are under different blocks",
					"status": "passed",
					"title": "should sendMountNodes with containingBlockId as a parent if they are under different blocks",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "mount"],
					"fullName": " SvelteAdapter mount should set existingNodes",
					"status": "passed",
					"title": "should set existingNodes",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "update"],
					"fullName": " SvelteAdapter update should sendUpdateNodes with correct data",
					"status": "passed",
					"title": "should sendUpdateNodes with correct data",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "update"],
					"fullName": " SvelteAdapter update should patch existingNodes and sendUpdateNodes with correct data",
					"status": "passed",
					"title": "should patch existingNodes and sendUpdateNodes with correct data",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "unmount"],
					"fullName": " SvelteAdapter unmount should sendUnmountNodes for root",
					"status": "passed",
					"title": "should sendUnmountNodes for root",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "unmount"],
					"fullName": " SvelteAdapter unmount should not sendUnmountNodes if cannot reach root node",
					"status": "passed",
					"title": "should not sendUnmountNodes if cannot reach root node",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "SvelteAdapter", "unmount"],
					"fullName": " SvelteAdapter unmount should sendUnmountNodes for child",
					"status": "passed",
					"title": "should sendUnmountNodes for child",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798945070,
			"endTime": 1715798945098,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/svelte/SvelteAdapter.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "getClosestElement"],
					"fullName": " getClosestElement should return the element itself if it is an Element node",
					"status": "passed",
					"title": "should return the element itself if it is an Element node",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getClosestElement"],
					"fullName": " getClosestElement should return the parent element if the node is not an Element node",
					"status": "passed",
					"title": "should return the parent element if the node is not an Element node",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getClosestElement"],
					"fullName": " getClosestElement should return null if the node has no parent element",
					"status": "passed",
					"title": "should return null if the node has no parent element",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798954938,
			"endTime": 1715798954941,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/utils/getClosestElement.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "parseProps"],
					"fullName": " parseProps should return null if fiberProps is null",
					"status": "passed",
					"title": "should return null if fiberProps is null",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseProps"],
					"fullName": " parseProps should parse and return group data for props",
					"status": "passed",
					"title": "should parse and return group data for props",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseProps"],
					"fullName": " parseProps should parse and return single prop",
					"status": "passed",
					"title": "should parse and return single prop",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseContext"],
					"fullName": " parseContext should return null if fiber does not have context",
					"status": "passed",
					"title": "should return null if fiber does not have context",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseContext"],
					"fullName": " parseContext should filter out contexts without memoizedValue",
					"status": "passed",
					"title": "should filter out contexts without memoizedValue",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseContext"],
					"fullName": " parseContext should parse and return the whole context data without _debugHookTypes",
					"status": "passed",
					"title": "should parse and return the whole context data without _debugHookTypes",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseContext"],
					"fullName": " parseContext should slice the number of contexts based on _debugHookTypes",
					"status": "passed",
					"title": "should slice the number of contexts based on _debugHookTypes",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseHooks"],
					"fullName": " parseHooks should return an empty data array if memoizedState is null",
					"status": "passed",
					"title": "should return an empty data array if memoizedState is null",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseHooks"],
					"fullName": " parseHooks should return an array of objects representing the memoized state",
					"status": "passed",
					"title": "should return an array of objects representing the memoized state",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseHooks"],
					"fullName": " parseHooks should filter out \"useDebugValue\" and \"useContext\" as labels from the hookTypes array",
					"status": "passed",
					"title": "should filter out \"useDebugValue\" and \"useContext\" as labels from the hookTypes array",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseHooks"],
					"fullName": " parseHooks should assign \"unknown\" label to hooks without corresponding hookTypes",
					"status": "passed",
					"title": "should assign \"unknown\" label to hooks without corresponding hookTypes",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseState"],
					"fullName": " parseState should return null if memoizedState is null",
					"status": "passed",
					"title": "should return null if memoizedState is null",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "parseState"],
					"fullName": " parseState should parse and return group data for memoized state",
					"status": "passed",
					"title": "should parse and return group data for memoized state",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getNodeState"],
					"fullName": " getNodeState should return null if memoizedState is null",
					"status": "passed",
					"title": "should return null if memoizedState is null",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getNodeState"],
					"fullName": " getNodeState should return null if memoizedState is not an object",
					"status": "passed",
					"title": "should return null if memoizedState is not an object",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798949192,
			"endTime": 1715798949200,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/react/inspect-element/inspect-element.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "extractNameFromType"],
					"fullName": " extractNameFromType should return the correct fiber name when type is a string",
					"status": "passed",
					"title": "should return the correct fiber name when type is a string",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "extractNameFromType"],
					"fullName": " extractNameFromType should return the correct fiber name when type is a function",
					"status": "passed",
					"title": "should return the correct fiber name when type is a function",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "extractNameFromType"],
					"fullName": " extractNameFromType should return the correct fiber name when type is a symbol",
					"status": "passed",
					"title": "should return the correct fiber name when type is a symbol",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "extractNameFromType"],
					"fullName": " extractNameFromType should return the correct fiber name when type is a forward ref",
					"status": "passed",
					"title": "should return the correct fiber name when type is a forward ref",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "extractNameFromType"],
					"fullName": " extractNameFromType should return the correct fiber name when type is null",
					"status": "passed",
					"title": "should return the correct fiber name when type is null",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for HostComponent tag",
					"status": "passed",
					"title": "should return the correct fiber name for HostComponent tag",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for HostRoot tag",
					"status": "passed",
					"title": "should return the correct fiber name for HostRoot tag",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for HostText tag with string props",
					"status": "passed",
					"title": "should return the correct fiber name for HostText tag with string props",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for HostText tag with empty string props",
					"status": "passed",
					"title": "should return the correct fiber name for HostText tag with empty string props",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for Fragment tag",
					"status": "passed",
					"title": "should return the correct fiber name for Fragment tag",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for ContextProvider tag",
					"status": "passed",
					"title": "should return the correct fiber name for ContextProvider tag",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getFiberName"],
					"fullName": " getFiberName should return the correct fiber name for ContextConsumer tag",
					"status": "passed",
					"title": "should return the correct fiber name for ContextConsumer tag",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "isForwardRef"],
					"fullName": " isForwardRef should return true for a valid forward ref object",
					"status": "passed",
					"title": "should return true for a valid forward ref object",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "isForwardRef"],
					"fullName": " isForwardRef should return false for null",
					"status": "passed",
					"title": "should return false for null",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "isForwardRef"],
					"fullName": " isForwardRef should return false for undefined",
					"status": "passed",
					"title": "should return false for undefined",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "isForwardRef"],
					"fullName": " isForwardRef should return false for an object without $$typeof property",
					"status": "passed",
					"title": "should return false for an object without $$typeof property",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "isForwardRef"],
					"fullName": " isForwardRef should return false for an object with $$typeof property that is not a symbol",
					"status": "passed",
					"title": "should return false for an object with $$typeof property that is not a symbol",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "isForwardRef"],
					"fullName": " isForwardRef should return false for an object with $$typeof property that is not Symbol.for(\"react.forward_ref\")",
					"status": "passed",
					"title": "should return false for an object with $$typeof property that is not Symbol.for(\"react.forward_ref\")",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getForwardRefName"],
					"fullName": " getForwardRefName should return \"Unknown\" when displayName and render name are empty",
					"status": "passed",
					"title": "should return \"Unknown\" when displayName and render name are empty",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getForwardRefName"],
					"fullName": " getForwardRefName should return the displayName when it is a non-empty string",
					"status": "passed",
					"title": "should return the displayName when it is a non-empty string",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getForwardRefName"],
					"fullName": " getForwardRefName should return the render name when displayName is empty and render name is a non-empty string",
					"status": "passed",
					"title": "should return the render name when displayName is empty and render name is a non-empty string",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798951382,
			"endTime": 1715798951387,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/react/utils/getFiberName.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "getNearestStateNode"],
					"fullName": " getNearestStateNode should return stateNode if is already an instance of Node",
					"status": "passed",
					"title": "should return stateNode if is already an instance of Node",
					"duration": 2,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getNearestStateNode"],
					"fullName": " getNearestStateNode should return null if no stateNode is found in the fiber tree",
					"status": "passed",
					"title": "should return null if no stateNode is found in the fiber tree",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getNearestStateNode"],
					"fullName": " getNearestStateNode should return the nearest stateNode in the fiber tree",
					"status": "passed",
					"title": "should return the nearest stateNode in the fiber tree",
					"duration": 1,
					"failureMessages": []
				}
			],
			"startTime": 1715798953518,
			"endTime": 1715798953521,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/react/utils/getNearestStateNode.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "getRendererMajorVersion"],
					"fullName": " getRendererMajorVersion should return the version when it is a number",
					"status": "passed",
					"title": "should return the version when it is a number",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getRendererMajorVersion"],
					"fullName": " getRendererMajorVersion should return the major version when it is a string",
					"status": "passed",
					"title": "should return the major version when it is a string",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getRendererMajorVersion"],
					"fullName": " getRendererMajorVersion should return null when the version is not a number or string",
					"status": "passed",
					"title": "should return null when the version is not a number or string",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getRendererMajorVersion"],
					"fullName": " getRendererMajorVersion should return null when the major version cannot be parsed from the string",
					"status": "passed",
					"title": "should return null when the major version cannot be parsed from the string",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798954233,
			"endTime": 1715798954235,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/react/utils/getRendererMajorVersion.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "addSvelteListener"],
					"fullName": " addSvelteListener should add an event listener",
					"status": "passed",
					"title": "should add an event listener",
					"duration": 3,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "addSvelteListener"],
					"fullName": " addSvelteListener should remove the event listener",
					"status": "passed",
					"title": "should remove the event listener",
					"duration": 1,
					"failureMessages": []
				}
			],
			"startTime": 1715798955649,
			"endTime": 1715798955653,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/svelte/utils/addSvelteListener.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "getNodeTypeName"],
					"fullName": " getNodeTypeName should return the correct type and name for an element node",
					"status": "passed",
					"title": "should return the correct type and name for an element node",
					"duration": 3,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getNodeTypeName"],
					"fullName": " getNodeTypeName should return the correct type and name for a text node",
					"status": "passed",
					"title": "should return the correct type and name for a text node",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getName"],
					"fullName": " getName should return \"#anchor\" for an anchor node",
					"status": "passed",
					"title": "should return \"#anchor\" for an anchor node",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getName"],
					"fullName": " getName should return the node value for a text node",
					"status": "passed",
					"title": "should return the node value for a text node",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getName"],
					"fullName": " getName should return the node name for other node types",
					"status": "passed",
					"title": "should return the node name for other node types",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798952807,
			"endTime": 1715798952812,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/svelte/utils/getNodeTypeName.test.ts"
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["", "getParsedNodeDisplayName"],
					"fullName": " getParsedNodeDisplayName should return \"#anchor\" for anchor type",
					"status": "passed",
					"title": "should return \"#anchor\" for anchor type",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getParsedNodeDisplayName"],
					"fullName": " getParsedNodeDisplayName should return \"<elementName>\" for element type",
					"status": "passed",
					"title": "should return \"<elementName>\" for element type",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getParsedNodeDisplayName"],
					"fullName": " getParsedNodeDisplayName should return \"\"nodeName\"\" for text type",
					"status": "passed",
					"title": "should return \"\"nodeName\"\" for text type",
					"duration": 1,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getParsedNodeDisplayName"],
					"fullName": " getParsedNodeDisplayName should return \"{#nodeName}\" for each, if, else, then, catch, pending, key, and slot types",
					"status": "passed",
					"title": "should return \"{#nodeName}\" for each, if, else, then, catch, pending, key, and slot types",
					"duration": 0,
					"failureMessages": []
				},
				{
					"ancestorTitles": ["", "getParsedNodeDisplayName"],
					"fullName": " getParsedNodeDisplayName should return the node name for other types",
					"status": "passed",
					"title": "should return the node name for other types",
					"duration": 0,
					"failureMessages": []
				}
			],
			"startTime": 1715798952097,
			"endTime": 1715798952099,
			"status": "passed",
			"message": "",
			"name": "/home/runner/work/state-viz/state-viz/extension/src/pages/content/content-main/svelte/utils/getParsedNodeDisplayName.test.ts"
		}
	]
}
